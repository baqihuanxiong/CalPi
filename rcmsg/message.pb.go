// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package rcmsg

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CalRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Darts                int64    `protobuf:"varint,2,opt,name=darts,proto3" json:"darts,omitempty"`
	Timestamp            int64    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalRequest) Reset()         { *m = CalRequest{} }
func (m *CalRequest) String() string { return proto.CompactTextString(m) }
func (*CalRequest) ProtoMessage()    {}
func (*CalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *CalRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalRequest.Unmarshal(m, b)
}
func (m *CalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalRequest.Marshal(b, m, deterministic)
}
func (m *CalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalRequest.Merge(m, src)
}
func (m *CalRequest) XXX_Size() int {
	return xxx_messageInfo_CalRequest.Size(m)
}
func (m *CalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CalRequest proto.InternalMessageInfo

func (m *CalRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CalRequest) GetDarts() int64 {
	if m != nil {
		return m.Darts
	}
	return 0
}

func (m *CalRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type CalReply struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalReply) Reset()         { *m = CalReply{} }
func (m *CalReply) String() string { return proto.CompactTextString(m) }
func (*CalReply) ProtoMessage()    {}
func (*CalReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}

func (m *CalReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalReply.Unmarshal(m, b)
}
func (m *CalReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalReply.Marshal(b, m, deterministic)
}
func (m *CalReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalReply.Merge(m, src)
}
func (m *CalReply) XXX_Size() int {
	return xxx_messageInfo_CalReply.Size(m)
}
func (m *CalReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CalReply.DiscardUnknown(m)
}

var xxx_messageInfo_CalReply proto.InternalMessageInfo

func (m *CalReply) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CalReply) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*CalRequest)(nil), "rcmsg.CalRequest")
	proto.RegisterType((*CalReply)(nil), "rcmsg.CalReply")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0x4a, 0xce, 0x2d, 0x4e,
	0x57, 0x0a, 0xe0, 0xe2, 0x72, 0x4e, 0xcc, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0xe2,
	0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x62, 0xca, 0x4c, 0x11, 0x12,
	0xe1, 0x62, 0x4d, 0x49, 0x2c, 0x2a, 0x29, 0x96, 0x60, 0x02, 0x0b, 0x41, 0x38, 0x42, 0x32, 0x5c,
	0x9c, 0x25, 0x99, 0xb9, 0xa9, 0xc5, 0x25, 0x89, 0xb9, 0x05, 0x12, 0xcc, 0x60, 0x19, 0x84, 0x80,
	0x92, 0x05, 0x17, 0x07, 0xd8, 0xc4, 0x82, 0x9c, 0x4a, 0x0c, 0xf3, 0x50, 0x74, 0x32, 0xa1, 0xe9,
	0x34, 0x72, 0x00, 0xbb, 0x25, 0xb9, 0x34, 0x27, 0xb1, 0x24, 0xbf, 0x48, 0xc8, 0x88, 0x8b, 0xcb,
	0x37, 0x3f, 0xaf, 0x24, 0xd5, 0x39, 0xb1, 0x28, 0x27, 0x5f, 0x48, 0x50, 0x0f, 0xec, 0x5e, 0x3d,
	0x84, 0x63, 0xa5, 0xf8, 0x91, 0x85, 0x0a, 0x72, 0x2a, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x7e, 0x33,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xf7, 0x10, 0xcd, 0xec, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorClient interface {
	MonteCarlo(ctx context.Context, in *CalRequest, opts ...grpc.CallOption) (*CalReply, error)
}

type calculatorClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorClient(cc *grpc.ClientConn) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) MonteCarlo(ctx context.Context, in *CalRequest, opts ...grpc.CallOption) (*CalReply, error) {
	out := new(CalReply)
	err := c.cc.Invoke(ctx, "/rcmsg.Calculator/MonteCarlo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServer is the server API for Calculator service.
type CalculatorServer interface {
	MonteCarlo(context.Context, *CalRequest) (*CalReply, error)
}

// UnimplementedCalculatorServer can be embedded to have forward compatible implementations.
type UnimplementedCalculatorServer struct {
}

func (*UnimplementedCalculatorServer) MonteCarlo(ctx context.Context, req *CalRequest) (*CalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonteCarlo not implemented")
}

func RegisterCalculatorServer(s *grpc.Server, srv CalculatorServer) {
	s.RegisterService(&_Calculator_serviceDesc, srv)
}

func _Calculator_MonteCarlo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).MonteCarlo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcmsg.Calculator/MonteCarlo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).MonteCarlo(ctx, req.(*CalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rcmsg.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MonteCarlo",
			Handler:    _Calculator_MonteCarlo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
